import{a as e,c as o}from"./DUXXyp4T.js";const n=e().required("Username is required").max(24,"Username too long").matches(/^\S*$/,"Username should not have space"),t=e().required("Enter your password").min(8,"Password should be at least 8 characters long").matches(/[0-9]/,"Password should contain at least one number").matches(/[a-z]/,"Password should contain at least one lowercase letter").matches(/[A-Z]/,"Password should contain at least one uppercase letter").matches(/[!@#$%^&*(),.?":{}|<>]/,"Password should contain at least a special character"),i=o({name:e().optional().min(3,"Name should be at least 3 characters long"),email:e().required("Email is required").email("Enter a valid email"),user_name:n,password:t}),c=o({name:e().optional().min(3,"Name should be at least 3 characters long"),email:e().required("Email is required").email("Enter a valid email"),stage_name:e().required("Stage name is required").min(2,"Stage name should be at least 2 characters long"),profession:e().required("Profession is required"),password:t}),m=o({password:t,password_confirmation:e().required("Confirm password")}).test("confirmation-test","",(s,a)=>{const r=a.createError({path:"password_confirmation",message:"Password don't match"});return s.password===s.password_confirmation?!0:r}),l=o({old_password:e().required("Old password required"),password:t,password_confirmation:e().required("Confirm password")}).test("new-password-test","",(s,a)=>{const r=a.createError({path:"password",message:"New password should not be same as old password"});return s.old_password===s.password?r:!0}).test("confirmation-test","",(s,a)=>{const r=a.createError({path:"password_confirmation",message:"Password don't match"});return s.password===s.password_confirmation?!0:r});export{i as A,l as C,c as H,m as R,n as U};
